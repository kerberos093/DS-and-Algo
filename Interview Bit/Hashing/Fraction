string calculateFraction( int64_t num,int64_t den) 
{ 
    // If the numerator is zero, answer is 0 
    if (num == 0) 
        return "0"; 
  
    // If any one (out of numerator and denominator) 
    // is -ve, sign of resultant answer -ve. 
    int64_t sign;
    if((num>=0&&den>0)||(num<0&&den<0))
      sign=1;
     else sign=-1;
  
    num = abs(num); 
    den = abs(den); 
  
    // Calculate the absolute part (before decimal point). 
    int64_t initial = num / den; 
  
    // Output string to store the answer 
    string res; 
  
    // Append sign 
    if (sign == -1) 
        res += "-"; 
  
    // Append the initial part 
    res += to_string(initial); 
  
    // If completely divisible, return answer. 
    if (num % den == 0) 
        return res; 
  
    res += "."; 
  
    // Initialize Remainder 
    int64_t rem = num % den;  
    map<int, int> mp; 
  
    // Position at which fraction starts repeating 
    // if it exists 
    int64_t index; 
    bool repeating = false; 
    while (rem > 0 && !repeating) { 
  
        // If this remainder is already seen, 
        // then there exists a repeating fraction. 
        if (mp.find(rem) != mp.end()) { 
  
            // Index to insert parentheses 
            index = mp[rem]; 
            repeating = true; 
            break; 
        } 
        else
            mp[rem] = res.size(); 
  
        rem = rem * 10; 
  
        // Calculate quotient, append it to result and 
        // calculate next remainder 
        int64_t temp = rem / den; 
        res += to_string(temp); 
        rem = rem % den; 
    } 
  
    // If repeating fraction exists, insert parentheses. 
    if (repeating) { 
        res += ")"; 
        res.insert(index, "("); 
    } 
  
    // Return result. 
    return res; 
} 
string Solution::fractionToDecimal(int A,int B) {
    int64_t N = int64_t(A);
    int64_t D = int64_t(B);
    string str=calculateFraction(N,D);
    return str;
  
}
