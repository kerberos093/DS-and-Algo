/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
int treePathsSumUtil(TreeNode *root, int value)  
{  
    // Base case  
    if (root == NULL) return 0;  
  
    // Update val  
    value = (((value*10)%1003 + (root->val)%1003))%1003;  
  
    // if current node is leaf, return the current value of val  
    if (root->left==NULL && root->right==NULL)  
    return value;  
  
    // recur sum of values for left and right subtree  
    return( treePathsSumUtil(root->left, value) +  
        treePathsSumUtil(root->right, value));  
}  
int Solution::sumNumbers(TreeNode* A) {
    //int value=0;
    int res=treePathsSumUtil(A,0);
    return(res%1003);
}
