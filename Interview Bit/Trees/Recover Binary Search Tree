/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

void inorder(TreeNode *node,vector<int>&b)
{
    if(node==NULL)
     return;
    inorder(node->left,b);
    b.push_back(node->val);
    inorder(node->right,b);
}
vector<int> Solution::recoverTree(TreeNode* A) {
  vector<int>b;
  inorder(A,b);
  vector<int>c;
  vector<int>k;
  for(int i=0;i<b.size()-1;i++)
  {
      if(b[i+1]<b[i])
      {
          c.push_back(b[i]);
          c.push_back(b[i+1]);
      }
  }
  sort(c.begin(),c.end());
  k.push_back(c[0]);
  k.push_back(c[c.size()-1]);
  return k;
}
