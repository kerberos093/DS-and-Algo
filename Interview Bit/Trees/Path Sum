/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
bool hasPath(TreeNode* Node, int sum)  
{  
    /* return true if we run out of tree and sum==0 */
    if (Node == NULL)  
    {  
        return (sum == 0);  
    }  
      
    else
    {  
        bool ans = 0;  
      
        /* otherwise check both subtrees */
        int subSum = sum - Node->val;  
      
        /* If we reach a leaf node and sum becomes 0 then return true*/
        if ( subSum == 0 && Node->left == NULL && Node->right == NULL )  
        return 1;  
      
        if(Node->left)  
            ans = ans || hasPath(Node->left, subSum);  
        if(Node->right)  
            ans = ans || hasPath(Node->right, subSum);  
      
        return ans;  
    }  
}  
int Solution::hasPathSum(TreeNode* A, int B) {
    int res=hasPath(A,B);
    return res;
}
