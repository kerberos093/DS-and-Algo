/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 TreeNode* sortedArrayToBST(vector<int>arr,  
                        int start, int end)  
{  
    /* Base Case */
    
    if (start > end)  
    return NULL;  
   if(start == end)
        return new TreeNode(arr[start]);
    /* Get the middle element and make it root */
    int mid = (start + end)/2;  
    TreeNode *root = new TreeNode(arr[mid]);  
  
    /* Recursively construct the left subtree  
    and make it left child of root */
    root->left = sortedArrayToBST(arr, start,  
                                    mid - 1);  
  
    /* Recursively construct the right subtree  
    and make it right child of root */
    root->right = sortedArrayToBST(arr, mid + 1, end);  
  
    return root;  
}  
TreeNode* Solution::sortedListToBST(ListNode* A) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
  vector<int>a;
  ListNode *ptr=A;
  while(ptr!=NULL)
  {
      a.push_back(ptr->val);
      ptr=ptr->next;
  }
  int size=a.size();
 TreeNode *head;
    head = sortedArrayToBST(a,0,size-1);
  return head;
}
