void printSpiral(struct node* root) 
{ 
    int h = height(root); 
    int i; 
  
    /*ltr -> Left to Right. If this variable is set, 
      then the given level is traversed from left to right. */
    bool ltr = false; 
    for (i = 1; i <= h; i++) { 
        printGivenLevel(root, i, ltr); 
  
        /*Revert ltr to traverse next level in opposite order*/
        ltr = !ltr; 
    } 
} 
  
/* Print nodes at a given level */
void printGivenLevel(struct node* root, int level, int ltr) 
{ 
    if (root == NULL) 
        return; 
    if (level == 1) 
        printf("%d ", root->data); 
    else if (level > 1) { 
        if (ltr) { 
            printGivenLevel(root->left, level - 1, ltr); 
            printGivenLevel(root->right, level - 1, ltr); 
        } 
        else { 
            printGivenLevel(root->right, level - 1, ltr); 
            printGivenLevel(root->left, level - 1, ltr); 
        } 
    } 
} 
  
/* Compute the "height" of a tree -- the number of 
    nodes along the longest path from the root node 
    down to the farthest leaf node.*/
int height(struct node* node) 
{ 
    if (node == NULL) 
        return 0; 
    else { 
        /* compute the height of each subtree */
        int lheight = height(node->left); 
        int rheight = height(node->right); 
  
        /* use the larger one */
        if (lheight > rheight) 
            return (lheight + 1); 
        else
            return (rheight + 1); 
    } 
} 
