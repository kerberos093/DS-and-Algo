void storeInorderTraversal(struct Node* root,  
                                vector<int>& arr) 
{ 
    // if root is NULL 
    if (!root) 
        return; 
  
    // first recur on left child 
    storeInorderTraversal(root->left, arr); 
  
    // then store the root's data in 'arr' 
    arr.push_back(root->data); 
  
    // now recur on right child 
    storeInorderTraversal(root->right, arr); 
} 
  
// function to replace each node with the sum of its 
// inorder predecessor and successor 
void replaceNodeWithSum(struct Node* root, 
                        vector<int> arr, int* i) 
{ 
    // if root is NULL 
    if (!root) 
        return; 
  
    // first recur on left child 
    replaceNodeWithSum(root->left, arr, i); 
  
    // replace node's data with the sum of its 
    // inorder predecessor and successor 
    root->data = arr[*i - 1] + arr[*i + 1]; 
  
    // move 'i' to point to the next 'arr' element 
    ++*i; 
  
    // now recur on right child 
    replaceNodeWithSum(root->right, arr, i); 
} 
  
// Utility function to replace each node in binary 
// tree with the sum of its inorder predecessor  
// and successor 
void replaceNodeWithSumUtil(struct Node* root) 
{ 
    // if tree is empty 
    if (!root) 
        return; 
  
    vector<int> arr; 
  
    // store the value of inorder predecessor 
    // for the leftmost leaf 
    arr.push_back(0); 
  
    // store the inoder traversal of the tree in 'arr' 
    storeInorderTraversal(root, arr); 
  
    // store the value of inorder successor 
    // for the rightmost leaf 
    arr.push_back(0);   
  
    // replace each node with the required sum 
    int i = 1; 
    replaceNodeWithSum(root, arr, &i); 
} 
